
#include <inttypes.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <avr/sleep.h>

#define byte unsigned char

// Переменные
byte doMain = 1;
byte count = 0;
byte sended = 0;
byte data[5] = {0, 0, 0, 0, 0};

// Функции
byte getBit(byte b, int bitNum)
{
   return (b >> bitNum) & 1;
}

byte setBit0(byte b, int bitNum)
{
   return b & ~(byte)(1 << bitNum);
}

byte setBit1(byte b, int bitNum)
{
   return b | (byte)(1 << bitNum);
}

// Функция нормализации
void normalyze(byte* val)
{
   byte minusFlag = getBit(val[0], 7);
   if (minusFlag == 1)
   {
      val[1] = 0xFF - val[1];
      val[2] = 0xFF - val[2];
   }

   byte highBit;
   while (getBit(val[1], 7) == 0)
   {
      highBit = getBit(val[2], 7);
      val[2] = val[2] << 1;
      val[1] = (val[1] << 1) | highBit;
      --val[0];
   }
   highBit = getBit(val[2], 7);
   val[2] = val[2] << 1;
   val[1] = (val[1] << 1) | highBit;
   
   if (minusFlag == 1)
   {
      val[1] = 0xFF - val[1];
      val[2] = 0xFF - val[2];
   }
}


// Обработчики прерываний
ISR(INT1_vect)
{
   // Устанавливаем 2000 тактов до переполнения таймера 1
   TCNT1H = 0xFF - 0x07;
   TCNT1L = 0xFF - 0xD0;

   TCNT0 = 0;
   count = 0;
   // Запускаем таймеры
   TCCR1B = (0 << CS12) | (0 << CS11) | (1 << CS10);
   TCCR0 = (1 << CS02) | (1 << CS01) | (1 << CS00);


   while (((TIFR >> TOV1) & 1) == 0)
   {
      // Если произошло переполнения таймера 0
      if (((TIFR >> TOV0) & 1) == 1)
      {
         ++count;
         TIFR = TIFR | 1;
      }
   }

   // Останавливаем таймеры
   TCCR0 = 0;
   TCCR1B = 0;

   // Записываем данные в "ОЗУ"
   data[0] = data[3] = count;
   data[1] = data[4] = TCNT0;
   data[2] = 0x70;

   // Рассчёт частоты
   normalyze(&data[2]);

   sei();
   // Передача данных
   UCSRB = (1 << TXCIE) | (1 << TXEN);

   sended = 5;

   while (getBit(UCSRA, UDRE) != 1);

   UDR = data[0];

   while (sended > 0);

   UCSRB = (0 << TXCIE) | (0 << TXEN);

   doMain = 0;
   cli();
}

ISR(USART_TX_vect)
{
   --sended;

   if (sended > 0)
   {
      while (getBit(UCSRA, UDRE) != 1);

      UDR = data[5 - sended];
   }
}


// MAIN

int main()
{

   // Настройка порта для прерываний
   DDRD = setBit0(DDRD, 3);
   PORTD = setBit1(PORTD, 3);

   MCUCR = (1 << ISC01) | (1 << ISC00);
   GICR = (1 << INT1);

   // Настройка порта для счётчика-таймера
   DDRB = setBit0(DDRB, 0);
   PORTB = setBit1(PORTB, 0);

   // Настройки для порта USART

   // Сброс регистров
   UCSRA = 0;
   UCSRB = 0;
   UCSRC = 0;

   // Установка скорости
   UBRRH = 0;
   UBRRL = 103;

   // Настройка кадра
   UCSRC = 0x86;

   // Разрешение прерываний
   if (doMain > 0)
      sei();

   while (doMain > 0);

   while (1);

   return 0;
}
